/* Comentario en CSS
Regla css consta de dos partes:
1) el selector
2) bloque de declaraciones: {
  atributo: valor;
  atributo-de-mas-palabras: valor;
}
*/
/*Son mala pr√°ctica por que son bloqueantes a la hora de que el navegador lee
esta instrucci√≥n*/
/* @import url("otro-style.css"); */

h1{
  color: chocolate;
  background-color: aqua;
  text-align: center;
  border-style: solid;
  border-color: black;
}

/*
Selectores b√°sicos:
1) Etiquetas -> Son elementos html
2) Identificadores -> son atributo id - #
3) Clases -> atributo class - .
*/

p{
  color: midnightblue;
}

/*Dar estilos con Id se considera un antipatr√≥n(mala pr√°ctica)*/
#parrafo-dos{
  background-color: skyblue;
}

/*Dar estilos con clases nos permite reutilizar nuestro c√≥digo css*/

.bg-skyblue{
  background-color: skyblue;
}

.bg-steelblue{
  background-color: steelblue;
}

.text-20{
  font-size: 20px;
}

.text-32{
  font-size: 32px;
}

.text-white{
  color: white;
}

.hijos-directos > li{
  background-color: thistle;
}

.hijos-descendientes b{
  background-color: thistle;
}

/* Los selectores de hermanos van a aplicar a  los elementos que son hermanos y que est√©n por
debajo del elemento de referencia */
.hermanos-general ~ li {
  background-color: thistle;
}

.hermanos-adyacentes + li {
  background-color: thistle;
}

/* Selectores de atributos */

.selectores-atributos a[href]{
  color: orangered;
}

.selectores-atributos a[target="_blank"]{
  font-weight: bold;
}

/* El comodin del * aplica el estilo si contiene el texto en cuesti√≥n en cualquier parte*/
.selectores-atributos a[href*="jonmircha"]{
  font-size: 24px;
}

/* El comodin del ^ aplica el estilo si contiene el texto en cuestion al inicio*/
.selectores-atributos a[href^="http://"]{
  text-decoration: none;
}

/* El comodin del $ aplica el estilo si contiene el texto en cuestion al final*/
.selectores-atributos a[href$=".com"]{
  background-color: black;
}

/* El comodin del ~ aplica el estilo si contiene el texto en cuestion en una lista separada por espacios*/
.selectores-atributos a[class ~="cursos"]{
  background-color: steelblue;
}

/* El comodin del | aplica el estilo si contiene el texto en cuestion en una lista separada por espacios y que despu√©s del texto en cuesti√≥n pueda venir un gui√≥n medio -*/
.selectores-atributos a[class |="menu"]{
  font-style: italic;
}

/* Selector universal */

*{
  font-family: sans-serif;
}

.selector-universal * {
  font-size: 24px;
}

/* PseudoClases - Dan estilos dependiendo del contexto, posici√≥n o estado del elemento se usa :
    https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-classes
*/
/* required es un estado del formulario */
.form-pseudoclases *:required{
  border-color: yellow;
}

.form-pseudoclases *:valid{
  border-color: green;
}

.form-pseudoclases *:invalid{
  border-color: red;
}

.form-pseudoclases *:focus{
  background-color: skyblue;
}

.form-pseudoclases *:disabled{
  background-color: pink;
}

/* Orden adecuado de pseudoclases:
:link
:active
:visited
:hover
*/

.menu-pseudoclases a:visited{
  color: olive;
}

/*Se le aplicar√° el estilo (Hover = un estado) cuando el cursor est√° por encima de una etiqueta*/
.menu-pseudoclases a:hover{
  color: orange;
}

.p-pseudoclases:hover{
  font-size: 20px;
}

#temario-css:target{
  background-color: lightgreen;
}

.lista-pseudoclases li:first-child{
  color: blue;
}

.lista-pseudoclases li:last-child{
  color: violet;
}

.lista-pseudoclases li:nth-child(3){
  color: pink;
}

.lista-pseudoclases li:nth-child(2n){
  font-size: 18px;
}

/* Va realizando los cambios en la lista desordenada de 3 en 3 */
.lista-pseudoclases li:nth-child(3n){
  font-size: 18px;
}

/* even usado para los elementos pares significa que va de 2 en 2*/
.lista-pseudoclases li:nth-child(even){
  background-color: yellow;
}

/* odd usado para los elementos impares*/
.lista-pseudoclases li:nth-child(odd){
  background-color: orangered;
}

.articulo-pseudoclases p:first-of-type{
  background-color: aquamarine;
}

.articulo-pseudoclases p:last-of-type{
  background-color: brown;
}

.articulo-pseudoclases p:nth-of-type(3n){
  background-color: fuchsia;
}

/* la pseudoclase not() se usa cuando no se quiere que una etiqueta sea afectada por el estilo */
.articulo-pseudoclases *:not(p){
  background-color: darkseagreen;
}

/* 
Pseudoelementos - Dan estilos a partes espec√≠ficas de un elemento, se usa el :: para diferenciarlos de las pseudoclases
https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-elements
 */

 .saga-geminis::before{
  /* La propiedad content es importante en los pseudoelementos before y after */
  /* Content es el texto de contenido a complementar seg√∫n el pseudoelemento */
  content: "ü¶∏‚Äç‚ôÇÔ∏è";
 }

  .saga-geminis::after{
  /* La propiedad content es importante en los pseudoelementos before y after */
  content: "üõê";
 }

 .saga-precio::before{
  content: "$";
  font-weight: bold;
 }

 .saga-precio::after{
  content: "USD";
  font-weight: bold;
 }

 .p-pseudoelementos::first-letter{
  font-size: bold;
  font-size: 32px;
 }

.p-pseudoelementos::first-line{
  color:coral
 }

 .p-pseudoelementos::selection{
  color:green;
  background-color: black;
 }

 .input-pseudoelementos::placeholder{
  color: gold;
 }

 /* Agrupar Selectores */

.form-agrupar-selectores input[type="text"],
.form-agrupar-selectores input[type="email"],
.form-agrupar-selectores textarea{
  border-color: yellow;
  border-width: 2px;
  border-style: dashed;
  background-color: black;
  font-size: 20px;
  display: block;
  width: 300px;
 }

 /* 
 El Algoritmo de CSS: Es la forma en que el navegador aplica los estilos al documento HTML. Es vital entender este concepto para que entiendas como se aplican y en algunas ocasiones se sobreescriben las reglas CSS.
 1) La Cascada
 2) La espeficicidad
 3) La herencia

 La C√°scada es el mecanismo en que el navegador aplica los estilos. Y toma en cuenta el siguiente orden:
 1) El origen del c√≥digo:
    - El User Agent (los estilos por defecto del navegador)
    - Personalizaciones del usuario.
    - Los estilos del autor.
  2) La Especificidad del Selector
  3) Orden de Aparici√≥n

  La Especificidad es el peso que tiene un selector cuando hay conflicto de estilos. Se calcula de la siguiente forma:

  Etiquetas y pseudoelementos ------------------ 0,0,0,1
  Clases, atributos y pseudoclases ------------- 0,0,1,0
  Identificadores ------------------------------ 0,1,0,0
  Estilos en l√≠nea ----------------------------- 1,0,0,0
  !important ----------------------------------- Rompe la especificidad

  La Herencia, es la capacidad de un selector de obtener (heredar) los valores de sus ancestros m√°s cercanos, para aplicarla se usa el valor inherit, si queremos evitarla podemos asignar otro valor o inicializar la propiedad con el valor initial

  https://web.dev/learn/css/inheritance/#which-properties-are-inheritable
 */

 /* Especificidad */

 /* Mala pr√°ctica */
 /* En caso de usarlo el orden ser√≠a: etiqueta>id>clase */
blockquote#cita-marco.cita-marco{
  background-color: lightsteelblue;
}

blockquote{
  background-color: burlywood;
}

#cita-marco{
  background-color: lightgreen;
}

blockquote.cita-marco{
  background-color: tomato;
}

.cita-marco{
  background-color: cornflowerblue;
}

/* !important es una mala pr√°ctica */
.cita-marco{
  background-color: mediumaquamarine !important;
}

blockquote#cita-marco{
  background-color: darkkhaki;
}

.cita-marco{
  background-color: moccasin !important;
  background-color: darkorange !important;
  font-size: 32px;
  border-style: dotted;
  border-color: red;
}

/* Herencia */
/* El color no se hereda */
.cita-marco cite{
  background-color: pink;
  background-color: inherit;
  font-size: 20px;
  font-size: inital;
  border-style: inherit;
  border-color: inherit;
}